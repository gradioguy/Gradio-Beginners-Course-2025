# -*- coding: utf-8 -*-
"""Blocks in Gradio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5tCqAds48W8p6q7hOS5oSucpZkkMYmO
"""

import gradio as gr

def greet(name):
  return f"Hello, {name}!"

with gr.Blocks() as demo:
  gr.Markdown("# Welcome to the Layout Demo")

  with gr.Row():
    inp = gr.Textbox(label="Enter you name")
    out = gr.Textbox(label="Output")

  with gr.Column():
    btn = gr.Button("Greet")
    gr.Markdown("Add more components below")

  btn.click(greet, inputs=inp, outputs=out)

if __name__ == "__main__":
  demo.launch()

import gradio as gr

def process_text(text):
  return f"Processed: {text.upper()}"

with gr.Blocks() as demo:
  gr.Markdown("Text Processing Demo")


  inp = gr.Textbox(label="Enter text", placeholder="Type here...")
  out = gr.Textbox(label="Processed text", value="", interactive=False)

  btn = gr.Button("Process")
  btn.click(process_text, inputs=inp, outputs=out)

  inp.change(process_text, inputs=inp, outputs=out)

if __name__ == "__main__":
  demo.launch()

import gradio as gr

def calculator(n1, n2, op):
  if op == "Add":
    return n1 + n2
  elif op == "Subtract":
    return n1 - n2
  else:
    return "Invalid operation"

with gr.Blocks() as demo:
  gr.Markdown("Multi-Tab Calculator")

  # Tabs
  with gr.Tab("Basic Operations"):
    n1 = gr.Number(label="Number 1")
    n2 = gr.Number(label="Number 2")
    op = gr.Radio(["Add", "Subtract"], label="Operation")
    btn = gr.Button("Calculate")
    result = gr.Textbox(label="Result")

  with gr.Tab("About"):
    gr.Markdown("This calculator performs basic arithmetic operations.")

  # Event for calculation
  btn.click(calculator, inputs=[n1, n2, op], outputs=result)

if __name__ == "__main__":
  demo.launch()

import gradio as gr

def display_summary(age, income):
  return f"Age: {age}, Income: ${income}"

with gr.Blocks() as demo:
  gr.Markdown("Nested Layout Demo")

  with gr.Row():
    with gr.Column():
      gr.Markdown("User Input")
      age = gr.Number(label="Age")
      income = gr.Number(label="Annual Income ($)")

    with gr.Column():
      gr.Markdown("Summary")
      btn = gr.Button("Generate Summary")
      output = gr.Textbox(label="Result")

  btn.click(display_summary, inputs=[age, income], outputs= output)

if __name__ == "__main__":
  demo.launch()

import gradio as gr

def process_image(img):
  return img.rotate(90)

with gr.Blocks() as demo:
  gr.Markdown("Responsive Image Processor")

  with gr.Column():
    gr.Markdown("Drop an image here")
    image_input = gr.Image(label="Input Image", type="pil")
    with gr.Row():
      process_btn  = gr.Button("Rotate 90")
      clear_btn = gr.Button("Clear")

    image_output = gr.Image(label="Output Image", type="pil")

  process_btn.click(process_image, inputs=image_input, outputs=image_output)
  clear_btn.click(lambda: None, outputs=image_input)

if __name__ == "__main__":
  demo.launch()

import gradio as gr

def reverse_text(text):
  return text[::-1]

def count_vowels(text):
  vowels = "aeiouAEIOU"
  return f"Number of vowels: {sum(1 for char in text if char in vowels)}"

with gr.Blocks() as demo:
  gr.Markdown("### Text Processing Tool")

  with gr.Tabs() as tabs:
    with gr.Tab("Reverse Text"):
      txt_input = gr.Textbox(
          placeholder="Enter text to reverse",
          label="Input Text"
      )
      txt_output = gr.Textbox(label="Reversed Text")
      reverse_btn = gr.Button("Reverse")
      reverse_btn.click(reverse_text, inputs=txt_input, outputs=txt_output)

    with gr.Tab("Count Vowels"):
      vowel_input = gr.Textbox(
          placeholder="Enter text to count vowels",
          label = "Input Text"
      )
      vowel_output = gr.Textbox(label="Number of Vowels")
      vowel_btn = gr.Button("Count")
      vowel_btn.click(count_vowels, inputs=vowel_input, outputs= vowel_output)

demo.launch()

import gradio as gr

def increment_counter(count):
  return count + 1

def decrement_counter(count):
  return count - 1

with gr.Blocks() as demo:
  gr.Markdown("### Simple Counter")

  with gr.Column():
    count = gr.Number(
        value=0,
        label="Current Count"
    )

    # Create buttons
    with gr.Row():
      inc_btn = gr.Button("Increment")
      dec_btn = gr.Button("Decrement")

    inc_btn.click(
        increment_counter,
        inputs=count,
        outputs=count
    )

    dec_btn.click(
        decrement_counter,
        inputs=count,
        outputs=count
    )

demo.launch()

