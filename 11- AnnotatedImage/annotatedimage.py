# -*- coding: utf-8 -*-
"""AnnotatedImage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zzpZiLzQHTgwsHyb-x10fg5_lI0gegs3
"""

import gradio as gr
import numpy as np
import random

def generate_detection(image):
  annotations = []
  labels = ["cat", "dog", "bird"]
  for _ in range(random.randint(1, 3)):
    x = random.randint(0, image.shape[1])
    y = random.randint(0, image.shape[0])
    w = random.randint(10, 100)
    h = random.randint(10, 100)
    box = (x, y, x + w, y + h)
    label = random.choice(labels)
    annotations.append((box, label))
  return (image, annotations)

with gr.Blocks() as demo:
  gr.Markdown("## Object Detection Demo")
  with gr.Row():
    img_input = gr.Image(label="Input Image")
    annotated_output = gr.AnnotatedImage(
        label = "Detected Objects",
        color_map = {"cat":"#ff0000", "dog": "#00ff00", "bird": "#0000ff"}
    )
  with gr.Row():
    detect_button = gr.Button("Detect Objects")

  detect_button.click(
      generate_detection,
      inputs = img_input,
      outputs = annotated_output
  )

demo.launch()

import gradio as gr
import numpy as np
import random

def generate_segmentation(image):
  annotations = []
  labels = ["sky", "grass", "building"]
  for _ in range(random.randint(1, 3)):
    x = random.randint(0, image.shape[1])
    y = random.randint(0, image.shape[0])
    r = random.randint(20, 50)
    mask = np.zeros(image.shape[:2])
    for i in range(image.shape[0]):
      for j in range(image.shape[1]):
        if (i - y)**2 + (j - x)**2 < r**2:
          mask[i, j] = 1
    annotations.append((mask, random.choice(labels)))
  return (image, annotations)

with gr.Blocks() as demo:
  gr.Markdown("## Image Segmentation Demo")
  with gr.Row():
    img_input = gr.Image(label="Input Image")
    seg_output = gr.AnnotatedImage(
        label = "Segments",
        color_map = {"sky": "#87CEEB", "grass": "#90EE90", "building": "#A0522D"}
    )

  with gr.Row():
    segment_button = gr.Button("Segment Image")

  segment_button.click(
      generate_segmentation,
      inputs = img_input,
      outputs = seg_output
  )

demo.launch()

import gradio as gr
import numpy as np


def generate_annotation(img):
  annotations = []
  for _ in range(3):
    x, y, w, h = np.random.randint(0, img.shape[1], size=4)
    label = random.choice([" Labrador", " Car", " Bird"])
    annotations.append(((x, y, x+w, y+h), label))
  return (img, annotations)

with gr.Blocks() as demo:
  gr.Markdown("## Custom Colors")
  with gr.Row():
    img_input = gr.Image(label="Input")
    ann_output = gr.AnnotatedImage(
        color_map={
            " Labrador": "#9FA08F",
            " Car": "#454545",
            " Bird": "#4169E1"
        }
    )
  add_annotations_btn = gr.Button("Add Colorful Annotations")

  add_annotations_btn.click(
      generate_annotation,
      inputs = img_input,
      outputs = ann_output
  )

demo.launch()

import gradio as gr
import numpy as np
import cv2
import random

def annotate_medical_image(image: np.ndarray) -> tuple[np.ndarray, list[tuple[int, int, int, int]]]:
  height, width = image.shape[:2]
  annotations = []

  #Simulate tumor detection
  num_tumors = random.randint(1, 3)
  for i in range(num_tumors):
    x1 = random.randint(0, width - 100)
    y1 = random.randint(0, height - 100)
    x2 = x1 + random.randint(50, 150)
    y2 = y1 + random.randint(50, 150)
    annotations.append(((x1, y1, x2, y2), "Tumor"))
  return (image, annotations)

with gr.Blocks() as demo:
  with gr.Row():
    image_input = gr.Image(label="Upload Medical Image")
    annotated_output = gr.AnnotatedImage(
        label = "Medical Annotations",
        color_map={"Tumor": "#ff0000"}
    )

  annotate_button = gr.Button("Annotate Image")

  annotate_button.click(
      annotate_medical_image,
      inputs = image_input,
      outputs = annotated_output
  )

demo.launch()

import gradio as gr
from mtcnn import MTCNN
import cv2

def detect_faces(image):
  detector = MTCNN()
  faces = detector.detect_faces(image)
  annotations = []
  labels = ["Face"] * len(faces)
  for face in faces:
    x, y, w, h = face['box']
    annotations.append(((x, y, x + w, y + h), "Face"))
  return (image, annotations)

with gr.Blocks() as demo:
  gr.Markdown("## Face Detection Demo")
  with gr.Row():
    img_input = gr.Image(label = "Upload Image")
    face_output = gr.AnnotatedImage(label = "Detected Faces", color_map={"Face": "#ffd700"})
  with gr.Row():
    detect_button = gr.Button("Detect Faces")

  detect_button.click(
      detect_faces,
      inputs = img_input,
      outputs=face_output
  )

demo.launch()

pip install mtcnn

