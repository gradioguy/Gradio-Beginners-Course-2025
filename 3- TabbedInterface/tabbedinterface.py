# -*- coding: utf-8 -*-
"""TabbedInterface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1852wZm5j36Jya4iEa1FT7UmCrWaBsp57
"""

import gradio as gr

def basic_calculator(num1, operation, num2):
  if operation == "Add":
    return num1 + num2
  elif operation == "Subtract":
    return num1 - num2
  elif operation == "Multiply":
    return num1 * num2
  elif operation == "Divide":
    return num1 / num2

def scientific_calculator(num, operation):
  import math
  if operation == "Square":
    return num ** 2
  elif operation == "Square Root":
    return math.sqrt(num)
  elif operation == "Cosine":
    return math.cos(num)
  elif operation == "Sine":
    return math.sin(num)


def programmer_calculator(num, operation):
  if operation == "Binary":
    return bin(num)
  elif operation == "Hexadecimal":
    return hex(num)
  elif operation == "Octal":
    return oct(num)
  elif operation == "Decimal":
    return int(num)

basic_tab = gr.Interface(
    fn=basic_calculator,
    inputs=["number", gr.Radio(["Add", "Subtract", "Multiply", "Divide"]), "number"],
    outputs = "number"
)

scientific_tab = gr.Interface(
    fn=scientific_calculator,
    inputs=["number", gr.Radio(["Square", "Square Root", "Cosine", "Sine"])],
    outputs = "number"
)

programmer_tab = gr.Interface(
    fn = programmer_calculator,
    inputs=["number", gr.Radio(["Binary", "Hexadecimal", "Octal", "Decimal"])],
    outputs = "text"
)

calculator_demo = gr.TabbedInterface(
    [basic_tab, scientific_tab, programmer_tab],
    tab_names=["Basic", "Scientific", "Programmer"]
)

calculator_demo.launch()

import gradio as gr

def translate_en_fr(text):
  return f"French translation of {text}"

def translate_en_es(text):
  return f"Spanish translation of {text}"

en_fr_tab = gr.Interface(
    fn = translate_en_fr,
    inputs = "text",
    outputs = "text"
)

en_es_tab = gr.Interface(
    fn = translate_en_es,
    inputs = "text",
    outputs = "text"
)

translator_demo = gr.TabbedInterface(
    [en_fr_tab, en_es_tab],
    tab_names=["English-French", "English-Spanish"]
)

translator_demo.launch()

import gradio as gr

def calculator_bmi(height, weight):
  bmi = weight / ((height/100)**2)
  return f"Your BMI is {bmi:.2f}"

bmi_tab = gr.Interface(
    fn=calculator_bmi,
    inputs=["number", "number"],
    outputs = "text"
)

metrics_tab = gr.Interface(
    fn=lambda: "Weight categories and progres metrics",
    inputs=None,
    outputs="text"
)

bmi_demo = gr.TabbedInterface(
    [bmi_tab, metrics_tab],
    tab_names=["Calculate BMI", "Health Metrics"]
)

bmi_demo.launch()

import gradio as gr

def chapter_one():
  return "Chapter One: The Beginning..."

def chapter_two():
  return "Chapter Two: The Middle..."

chapter1 = gr.Interface(
    fn = chapter_one,
    inputs = None,
    outputs = "text"
)

chapter2 = gr.Interface(
    fn = chapter_two,
    inputs = None,
    outputs = "text"
)

story_demo = gr.TabbedInterface(
    [chapter1, chapter2],
    tab_names=["Chapter1", "Chapter2"]
)

story_demo.launch()

import gradio as gr

def generate_italian(ingredients):
  return f"Italian recipe with {ingredients}"

def generate_mexican(ingredients):
  return f"Mexican recipe with {ingredients}"

Italian_tab = gr.Interface(
    fn = generate_italian,
    inputs = "text",
    outputs = "text"
)

mexican_tab = gr.Interface(
    fn = generate_mexican,
    inputs = "text",
    outputs = "text"
)

recipe_demo = gr.TabbedInterface(
    [Italian_tab, mexican_tab],
    tab_names=["Italian", "Mexican"]
)

recipe_demo.launch()

